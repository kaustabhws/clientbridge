generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Freelancer {
  id         String   @id @default(cuid())
  name       String
  email      String   @unique
  clerkId    String   @unique
  profession String
  bio        String?
  skills     String[]
  balance    Float    @default(0.0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  clients  Clients[]
  projects Projects[]
  invoices Invoices[]
}

model Clients {
  id      String       @id @default(cuid())
  name    String
  email   String       @unique
  phone   String?
  company String?
  address String?
  notes   String?
  status  ClientStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  freelancerId String
  freelancer   Freelancer @relation(fields: [freelancerId], references: [id])
  projects     Projects[]
  invoices     Invoices[]
}

model Projects {
  id          String        @id @default(cuid())
  name        String
  description String
  status      ProjectStatus
  budget      Float?
  deadline    DateTime
  attachments String[]
  progress    Int           @default(0)
  completedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  clientId     String
  client       Clients        @relation(fields: [clientId], references: [id])
  freelancerId String
  freelancer   Freelancer     @relation(fields: [freelancerId], references: [id])
  invoices     Invoices[]
  roadmap      RoadmapPhase[]
}

model RoadmapPhase {
  id          String             @id @default(cuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  order       Int
  description String?
  status      RoadmapPhaseStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  projectId String
  project   Projects     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  steps     PhaseSteps[]
}

model PhaseSteps {
  id          String             @id @default(cuid())
  name        String
  order       Int
  description String?
  status      RoadmapPhaseStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  roadmapPhaseId String
  roadmapPhase   RoadmapPhase @relation(fields: [roadmapPhaseId], references: [id], onDelete: Cascade)
}

model Invoices {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  amount        Float
  currency      String        @default("USD")
  status        InvoiceStatus
  dueDate       DateTime
  paidAt        DateTime?
  paymentMethod PaymentMethod
  notes         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  freelancerId String
  freelancer   Freelancer @relation(fields: [freelancerId], references: [id])
  clientId     String
  client       Clients    @relation(fields: [clientId], references: [id])
  projectId    String
  project      Projects   @relation(fields: [projectId], references: [id])
}

enum ClientStatus {
  ACTIVE
  INACTIVE
}

enum ProjectStatus {
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum RoadmapPhaseStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  BANK_TRANSFER
  PAYPAL
  STRIPE
  UPI
  OTHER
}
